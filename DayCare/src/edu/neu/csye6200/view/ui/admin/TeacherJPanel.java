/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.neu.csye6200.view.ui.admin;

import edu.neu.csye6200.controller.StudentController;
import edu.neu.csye6200.controller.TeacherController;
import edu.neu.csye6200.model.Student;
import edu.neu.csye6200.model.Teacher;
import edu.neu.csye6200.utils.ConvertUtil;
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aksha
 */
public class TeacherJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TeacherJPanel1
     */
    private JPanel userProcessContainer;

    public TeacherJPanel(JPanel userProcessContainer) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        lblTeacherInfoHeading = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblFirstName1 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        lblFirstName2 = new javax.swing.JLabel();
        txtParentName = new javax.swing.JTextField();
        lblFirstName3 = new javax.swing.JLabel();
        lblFirstName4 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblFirstName5 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblFirstName6 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jDateDoB = new com.toedter.calendar.JDateChooser();
        btnUpload = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnRating = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jTable2.setBackground(new java.awt.Color(153, 255, 255));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Teacher ID", "First Name", "Last Name", "Date of Birth", "Address", "Phone Number", "Rating"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        btnBack.setBackground(new java.awt.Color(153, 255, 255));
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTeacherInfoHeading.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lblTeacherInfoHeading.setText("Teacher Information");

        lblFirstName.setText("First Name:");

        lblFirstName1.setText("Last Name");

        lblFirstName2.setText("Parent Name");

        lblFirstName3.setText("Date of Birth");

        lblFirstName4.setText("Address");

        lblFirstName5.setText("Email");

        lblFirstName6.setText("Phone Number");

        btnUpload.setBackground(new java.awt.Color(153, 255, 255));
        btnUpload.setText("Upload CSV");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(153, 255, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(153, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(153, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(153, 255, 255));
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnRating.setBackground(new java.awt.Color(153, 255, 255));
        btnRating.setText("Get Rating");
        btnRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRatingActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/neu/csye6200/view/ui/Images/istockphoto-639573662-612x612.jpeg"))); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/neu/csye6200/view/ui/Images/istockphoto-639573662-612x612.jpeg"))); // NOI18N
        jLabel2.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFirstName1)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFirstName)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFirstName2)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtParentName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(342, 342, 342)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFirstName3)
                                        .addGap(18, 18, 18)
                                        .addComponent(jDateDoB, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFirstName6)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFirstName4)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblFirstName5)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnUpload)
                                .addGap(18, 18, 18)
                                .addComponent(btnAdd)
                                .addGap(40, 40, 40)
                                .addComponent(btnUpdate)
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTeacherInfoHeading)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDelete)
                                        .addGap(44, 44, 44)
                                        .addComponent(btnRating)
                                        .addGap(54, 54, 54)
                                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(394, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(889, Short.MAX_VALUE)))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnDelete, btnRating, btnUpdate, btnUpload});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTeacherInfoHeading))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblFirstName)
                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblFirstName3)
                        .addComponent(lblFirstName4)
                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateDoB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName1)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstName5)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstName6)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName2)
                    .addComponent(txtParentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnRating)
                    .addComponent(btnRefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(538, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addContainerGap()))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAdd, btnDelete, btnRating, btnRefresh, btnUpdate, btnUpload});

    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        // TODO add your handling code here:
        uploadCSV();
    }//GEN-LAST:event_btnUploadActionPerformed

    public void uploadCSV() {
        JFileChooser browse=new JFileChooser();
        FileNameExtensionFilter file=new FileNameExtensionFilter("*.csv", "txt");
        browse.addChoosableFileFilter(file);
        int selected= browse.showOpenDialog(null);
        if(selected==JFileChooser.APPROVE_OPTION){
            File uploadedImage=browse.getSelectedFile();
            String path=uploadedImage.getAbsolutePath();
            traverseTeacherCSVFileRow(path);
            JOptionPane.showMessageDialog(null, "File uploaded successfully!!");
        }
        populateTable();
    }
    
    public void traverseTeacherCSVFileRow(String path) {
        String line = "";
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Duplicate records found: \n");
        TeacherController teacherController = new TeacherController();
        List<Teacher> teacherDB = teacherController.getAllTeachers();
        Map<Long, Teacher> teacherMap = new HashMap<>();
        teacherDB.forEach(teacher -> teacherMap.put(teacher.getPhoneNum(), teacher));
        long lastTeacherId = teacherDB.get(teacherDB.size() - 1).getTeacherId();
        List<Teacher> teachers = new ArrayList<>();
        try{
            BufferedReader br = new BufferedReader(new FileReader(path));
            int i=0;
            while((line = br.readLine())!=null){
                if(i==0){
                    i++;
                    continue;
                }
                String[] values = line.split(";");
                String firstName = values[0];
                String lastName = values[1];
                String address = values[2];
                LocalDate dob = ConvertUtil.stringtoLocalDate(values[3]);
                long phoneNum = Long.parseLong(values[4]);
                String parentName = values[5];
                long teacherId = (lastTeacherId + i);
                Teacher teacherExist = teacherMap.get(phoneNum);
                if(teacherExist!=null) {
                    stringBuilder.append(line).append("\n");
                }else {
                    Teacher teacher = new Teacher(firstName, lastName, address, dob, phoneNum, parentName, teacherId);
                    teachers.add(teacher);
                    teacherMap.put(teacher.getPhoneNum(), teacher);
                }
            }
        } catch(IOException e){
            e.printStackTrace();
        }
        TeacherController controller = new TeacherController();
        controller.addTeacher(teachers);
        JOptionPane.showMessageDialog(this, stringBuilder.toString());
    }
        
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable2.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        long teacherId = ConvertUtil.stringToLong(model.getValueAt(selectedRowIndex, 0).toString());
        TeacherController teacherController = new TeacherController();
        teacherController.deleteTeacher(teacherId);
        ((DefaultTableModel) jTable2.getModel()).fireTableDataChanged();
        btnRefreshActionPerformed(evt);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        String address = txtAddress.getText();
        String email = txtEmail.getText();
        String parentName = txtParentName.getText();
        String phoneNumber = txtPhone.getText();
        Date dob = jDateDoB.getDate();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        LocalDate dateOfBirth = ConvertUtil.stringtoLocalDate(dateFormat.format(dob));
        try {
            if(firstName == null || firstName.isEmpty()){
                throw new NullPointerException("First Name field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "First Name field cannot be Empty !!!");
            return;
        }

        try {
            if(lastName == null || lastName.isEmpty()){
                throw new NullPointerException("Last Name field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Last Name field cannot be Empty !!!");
            return;
        }

        try {
            if(address == null || address.isEmpty()){
                throw new NullPointerException("Address field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Address field cannot be Empty !!!");
            return;
        }

        try {
            if(email == null || email.isEmpty()){
                throw new NullPointerException("Email field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Email field cannot be Empty !!!");
            return;
        }

        try {
            if(parentName == null || parentName.isEmpty()){
                throw new NullPointerException("Parent Name field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Parent Name field cannot be Empty !!!");
            return;
        }

        try {
            if(phoneNumber == null || phoneNumber.isEmpty()){
                throw new NullPointerException("Parent Phone Number field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Parent Phone Number field cannot be Empty !!!");
            return;
        }

        Teacher teacher = new Teacher(firstName, lastName, address, dateOfBirth, email, ConvertUtil.stringToLong(phoneNumber), parentName);
//        DefaultTableModel model = (DefaultTableModel) tblStudentInfo.getModel();
        TeacherController teacherController = new TeacherController();
        List<Teacher> teachers = teacherController.getAllTeachers();
        long lastTeachId = teachers.get(teachers.size() - 1).getTeacherId();
        //TODO: Assign Teacher to group
        teacher.setTeacherId(lastTeachId + 1);
        teacherController.addTeacher(teacher);
        btnRefreshActionPerformed(evt);
    
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int row = jTable2.getSelectedRow();
//        long teacherId = ConvertUtil.stringToLong(jTable2.getModel().getValueAt(row, 0).toString());
//        String firstName = jTable2.getModel().getValueAt(row, 1).toString();
//        String lastName = jTable2.getModel().getValueAt(row, 2).toString();
//        String address = jTable2.getModel().getValueAt(row, 3).toString();
//        String email = jTable2.getModel().getValueAt(row, 4).toString();
//        String parentName = jTable2.getModel().getValueAt(row, 5).toString();
//        String phoneNumber = jTable2.getModel().getValueAt(row, 6).toString();
//        Date dob = ConvertUtil.stringToDate(jTable2.getModel().getValueAt(row, 5).toString());
//        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
//        LocalDate dateOfBirth = ConvertUtil.stringtoLocalDate(dateFormat.format(dob));
//        try {
//            if(firstName == null || firstName.isEmpty()){
//                throw new NullPointerException("First Name field cannot be Empty !!!");
//            }
//        } catch(NullPointerException e){
//            JOptionPane.showMessageDialog(null, "First Name field cannot be Empty !!!");
//            return;
//        }
//
//        try {
//            if(lastName == null || lastName.isEmpty()){
//                throw new NullPointerException("Last Name field cannot be Empty !!!");
//            }
//        } catch(NullPointerException e){
//            JOptionPane.showMessageDialog(null, "Last Name field cannot be Empty !!!");
//            return;
//        }
//
//        try {
//            if(address == null || address.isEmpty()){
//                throw new NullPointerException("Address field cannot be Empty !!!");
//            }
//        } catch(NullPointerException e){
//            JOptionPane.showMessageDialog(null, "Address field cannot be Empty !!!");
//            return;
//        }
//
//        try {
//            if(email == null || email.isEmpty()){
//                throw new NullPointerException("Email field cannot be Empty !!!");
//            }
//        } catch(NullPointerException e){
//            JOptionPane.showMessageDialog(null, "Email field cannot be Empty !!!");
//            return;
//        }
//
//        try {
//            if(parentName == null || parentName.isEmpty()){
//                throw new NullPointerException("Parent Name field cannot be Empty !!!");
//            }
//        } catch(NullPointerException e){
//            JOptionPane.showMessageDialog(null, "Parent Name field cannot be Empty !!!");
//            return;
//        }
//
//        try {
//            if(phoneNumber == null || phoneNumber.isEmpty()){
//                throw new NullPointerException("Parent Phone Number field cannot be Empty !!!");
//            }
//        } catch(NullPointerException e){
//            JOptionPane.showMessageDialog(null, "Parent Phone Number field cannot be Empty !!!");
//            return;
//        }
//        Teacher teacher = new Teacher(firstName, lastName, address, dateOfBirth, email, ConvertUtil.stringToLong(phoneNumber), parentName);
////        DefaultTableModel model = (DefaultTableModel) tblStudentInfo.getModel();
//        TeacherController teacherController = new TeacherController();
//        //TODO: Assign Teacher to group
//        teacherController.updateTeacher(teacher);
//        btnRefreshActionPerformed(evt);
//        SchoolController schoolController = new SchoolController();
//        schoolController.rateAllTeachers();
        btnRefreshActionPerformed(evt);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        model.fireTableDataChanged();
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRatingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRatingActionPerformed

    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        TeacherController controller = new TeacherController();
        List<Teacher> teachers = controller.getAllTeachers();
        for(Teacher teacher: teachers){
            String teacherId = ConvertUtil.longToString(teacher.getTeacherId());
            String firstName = teacher.getFirstName();
            String lastName = teacher.getLastName();
            String dateOfBirth = ConvertUtil.dateToString(teacher.getDateOfBirth());
            String phoneNumber = ConvertUtil.longToString(teacher.getPhoneNum());
            String address = teacher.getAddress();
            String rating = ConvertUtil.doubleToString(teacher.getRating());
            if(rating.length() > 4){
                rating = rating.substring(0, 4);
            }
            Object[] row = {teacherId, firstName, lastName, dateOfBirth, address, phoneNumber, rating};
            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRating;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpload;
    private com.toedter.calendar.JDateChooser jDateDoB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblFirstName1;
    private javax.swing.JLabel lblFirstName2;
    private javax.swing.JLabel lblFirstName3;
    private javax.swing.JLabel lblFirstName4;
    private javax.swing.JLabel lblFirstName5;
    private javax.swing.JLabel lblFirstName6;
    private javax.swing.JLabel lblTeacherInfoHeading;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtParentName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
