/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.neu.csye6200.view.ui.admin;

import edu.neu.csye6200.controller.StudentController;
import edu.neu.csye6200.model.Student;
import edu.neu.csye6200.utils.AutoAssignUtil;
import edu.neu.csye6200.utils.ConvertUtil;
import java.awt.CardLayout;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aksha
 */
public class StudentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentJPanel1
     */
    private JPanel userProcessContainer;
    public StudentJPanel(JPanel userProcessContainer) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        populateTable();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudentInfo = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        lblStudentInfoHeading = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        lblFirstName1 = new javax.swing.JLabel();
        txtParentName = new javax.swing.JTextField();
        lblFirstName2 = new javax.swing.JLabel();
        lblFirstName3 = new javax.swing.JLabel();
        lblFirstName4 = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JTextField();
        lblFirstName5 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblFirstName6 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblFirstName7 = new javax.swing.JLabel();
        btnUploadCSV = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnImmune = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jDateRegis = new com.toedter.calendar.JDateChooser();
        jDateDoB = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tblStudentInfo.setBackground(new java.awt.Color(153, 255, 255));
        tblStudentInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "StudentID", "First Name", "Last Name", "Parent Name", "Phone Number", "Email", "Address"
            }
        ));
        jScrollPane1.setViewportView(tblStudentInfo);

        btnBack.setBackground(new java.awt.Color(153, 255, 255));
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblStudentInfoHeading.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lblStudentInfoHeading.setText("Student Information");

        lblFirstName.setText("First Name:");

        lblFirstName1.setText("Last Name");

        lblFirstName2.setText("Parent Name");

        lblFirstName3.setText("Registration Date:");

        lblFirstName4.setText("Phone Number:");

        lblFirstName5.setText("Address");

        lblFirstName6.setText("Email");

        lblFirstName7.setText("Date of Birth:");

        btnUploadCSV.setBackground(new java.awt.Color(153, 255, 255));
        btnUploadCSV.setText("Upload CSV");
        btnUploadCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadCSVActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(153, 255, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(153, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(153, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnImmune.setBackground(new java.awt.Color(153, 255, 255));
        btnImmune.setText("Track Immunization");
        btnImmune.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImmuneActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(153, 255, 255));
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/neu/csye6200/view/ui/Images/unnamed.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/neu/csye6200/view/ui/Images/unnamed.png"))); // NOI18N
        jLabel2.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFirstName1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFirstName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFirstName2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtParentName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(btnUploadCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(lblFirstName4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblFirstName7)
                                            .addComponent(lblFirstName3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jDateDoB, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jDateRegis, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(187, 187, 187)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblFirstName6)
                                            .addComponent(lblFirstName5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtAddress)
                                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(62, 62, 62)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(64, 64, 64)
                                        .addComponent(btnImmune)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(211, 211, 211)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(360, 360, 360)
                                .addComponent(lblStudentInfoHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1330, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(649, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jDateDoB, jDateRegis, txtPhoneNumber});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStudentInfoHeading)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblFirstName))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jDateDoB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblFirstName7)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblFirstName1)
                                .addComponent(lblFirstName3))
                            .addComponent(jDateRegis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFirstName5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFirstName6)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtParentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstName2)
                    .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstName4))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUploadCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnImmune)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(468, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAdd, btnDelete, btnImmune, btnUpdate, btnUploadCSV});

    }// </editor-fold>//GEN-END:initComponents

    public void traverseStudentCSVFileRow(String path) {
        String line = "";
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Duplicate records found: \n");
        StudentController studentController = new StudentController();
        List<Student> studentsDB = studentController.getAllStudents();
        Map<String, Student> studentMap = new HashMap<>();
        studentsDB.forEach(student -> studentMap.put(student.getEmail(), student));
        long lastStudId = studentsDB.get(studentsDB.size() - 1).getStudentId();
        List<Student> students = new ArrayList<>();
        try{
            BufferedReader br = new BufferedReader(new FileReader(path));
            int i=0;
            while((line = br.readLine())!=null){
                if(i==0){
                    i++;
                    continue;
                }
                String[] values = line.split(";");
                String firstName = values[0];
                String lastName = values[1];
                String address = values[2];
                LocalDate dob = ConvertUtil.stringtoLocalDate(values[3]);
                String parentName = values[4];
                String email = values[5];
                Date reg_date = ConvertUtil.stringToDate(values[6]);
                long phoneNum = Long.parseLong(values[7]);
                long studentId = (lastStudId + i);
                Student studentExist = studentMap.get(email);
                if(studentExist!=null) {
                    stringBuilder.append(line).append("\n");
                }else {
                    Student student = new Student(studentId, firstName, lastName, email, address, parentName, phoneNum, dob, reg_date);
                    students.add(student);
                    studentMap.put(student.getEmail(), student);
                }
            }
        } catch(IOException e){
            e.printStackTrace();
        }
        StudentController controller = new StudentController();
        controller.addStudent(students);
        JOptionPane.showMessageDialog(this, stringBuilder.toString());
    }

    public void uploadCSV() {
        JFileChooser browse=new JFileChooser();
        FileNameExtensionFilter file=new FileNameExtensionFilter("*.csv", "txt");
        browse.addChoosableFileFilter(file);
        int selected= browse.showOpenDialog(null);
        if(selected==JFileChooser.APPROVE_OPTION){
            File uploadedImage=browse.getSelectedFile();
            String path=uploadedImage.getAbsolutePath();
            traverseStudentCSVFileRow(path);
            JOptionPane.showMessageDialog(null, "File uploaded successfully!!");
        }
        populateTable();
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUploadCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadCSVActionPerformed
        // TODO add your handling code here:
        uploadCSV();
    }//GEN-LAST:event_btnUploadCSVActionPerformed

    private void btnImmuneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImmuneActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblStudentInfo.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a student to view Immunization.");
            return;
        }
        
        long studentId = ConvertUtil.stringToLong(tblStudentInfo.getModel().getValueAt(selectedRowIndex, 0).toString());

        

        TrackImmunizationJPanel trackImmunizationJPanel = new edu.neu.csye6200.view.ui.admin.TrackImmunizationJPanel(userProcessContainer, studentId);
        userProcessContainer.add("Tracking student Immunization", trackImmunizationJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnImmuneActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel) tblStudentInfo.getModel();
        model.setRowCount(0);
        model.fireTableDataChanged();
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        String parentName = txtParentName.getText();
        String parentPhoneNumber = txtParentName.getText();
        String address = txtAddress.getText();
        String email = txtEmail.getText();
        Date dob = jDateDoB.getDate();
        Date reg_date = jDateRegis.getDate();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        LocalDate dateOfBirth = ConvertUtil.stringtoLocalDate(dateFormat.format(dob));
        java.sql.Date registrationDate = ConvertUtil.stringToDate(dateFormat.format(reg_date));
//        LocalDate dob = ConvertUtil.dateToLocalDate(jDateBirthday.getDate());
//        Date reg_date = jDateRegistrationDate.getDate();

        try {
            if(firstName == null || firstName.isEmpty()){
                throw new NullPointerException("First Name field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "First Name field cannot be Empty !!!");
            return;
        }

        try {
            if(lastName == null || lastName.isEmpty()){
                throw new NullPointerException("Last Name field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Last Name field cannot be Empty !!!");
            return;
        }

        try {
            if(address == null || address.isEmpty()){
                throw new NullPointerException("Address field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Address field cannot be Empty !!!");
            return;
        }

        try {
            if(email == null || email.isEmpty()){
                throw new NullPointerException("Email field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Email field cannot be Empty !!!");
            return;
        }

        try {
            if(parentName == null || parentName.isEmpty()){
                throw new NullPointerException("Parent Name field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Parent Name field cannot be Empty !!!");
            return;
        }

        try {
            if(parentPhoneNumber == null || parentPhoneNumber.isEmpty()){
                throw new NullPointerException("Parent Phone Number field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Parent Phone Number field cannot be Empty !!!");
            return;
        }

        Student student = new Student(firstName, lastName, email, address, parentName, ConvertUtil.stringToLong(parentPhoneNumber), dateOfBirth, registrationDate);
//        DefaultTableModel model = (DefaultTableModel) tblStudentInfo.getModel();
        StudentController studentController = new StudentController();
        List<Student> students = studentController.getAllStudents();
        long lastStudId = students.get(students.size() - 1).getStudentId();
        student.setStudentId(lastStudId + 1);
        AutoAssignUtil.groupingLogicForSingleStudent(student);
        studentController.addStudent(student);
        btnRefreshActionPerformed(evt);
    
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        String parentName = txtParentName.getText();
        String parentPhoneNumber = txtPhoneNumber.getText();
        String address = txtAddress.getText();
        String email = txtEmail.getText();
        Date dob = jDateDoB.getDate();
        Date reg_date = jDateRegis.getDate();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        LocalDate dateOfBirth = ConvertUtil.stringtoLocalDate(dateFormat.format(dob));
        java.sql.Date registrationDate = ConvertUtil.stringToDate(dateFormat.format(reg_date));

        try {
            if(firstName == null || firstName.isEmpty()){
                throw new NullPointerException("First Name field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "First Name field cannot be Empty !!!");
            return;
        }

        try {
            if(lastName == null || lastName.isEmpty()){
                throw new NullPointerException("Last Name field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Last Name field cannot be Empty !!!");
            return;
        }

        try {
            if(address == null || address.isEmpty()){
                throw new NullPointerException("Address field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Address field cannot be Empty !!!");
            return;
        }

        try {
            if(email == null || email.isEmpty()){
                throw new NullPointerException("Email field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Email field cannot be Empty !!!");
            return;
        }

        try {
            if(parentName == null || parentName.isEmpty()){
                throw new NullPointerException("Parent Name field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Parent Name field cannot be Empty !!!");
            return;
        }

        try {
            if(parentPhoneNumber == null || parentPhoneNumber.isEmpty()){
                throw new NullPointerException("Parent Phone Number field cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Parent Phone Number field cannot be Empty !!!");
            return;
        }
        Student student = new Student(firstName, lastName, email, address, parentName, ConvertUtil.stringToLong(parentPhoneNumber), dateOfBirth, registrationDate);
//        DefaultTableModel model = (DefaultTableModel) tblStudentInfo.getModel();
        StudentController studentController = new StudentController();
        List<Student> students = studentController.getAllStudents();
        long lastStudId = students.get(students.size() - 1).getStudentId();
        student.setStudentId(lastStudId + 1);
        studentController.updateStudent(student);
        btnRefreshActionPerformed(evt);

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblStudentInfo.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblStudentInfo.getModel();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        long studentId = ConvertUtil.stringToLong(model.getValueAt(selectedRowIndex, 0).toString());
        StudentController studentController = new StudentController();
        studentController.deleteStudent(studentId);
        ((DefaultTableModel) tblStudentInfo.getModel()).fireTableDataChanged();
        btnRefreshActionPerformed(evt);
    }//GEN-LAST:event_btnDeleteActionPerformed

public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) tblStudentInfo.getModel();
        model.setRowCount(0);
        StudentController controller = new StudentController();
        List<Student> studentList = controller.getAllStudents();
        for(Student student: studentList){
            String studentId = ConvertUtil.longToString(student.getStudentId());
            String firstName = student.getFirstName();
            String lastName = student.getLastName();
            String parentName = student.getParentName();
            String phoneNumber = ConvertUtil.longToString(student.getPhoneNum());
            String email = student.getEmail();
            String address = student.getAddress();
            Object[] row = {studentId, firstName, lastName, parentName, phoneNumber, email, address};
            model.addRow(row);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnImmune;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUploadCSV;
    private com.toedter.calendar.JDateChooser jDateDoB;
    private com.toedter.calendar.JDateChooser jDateRegis;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblFirstName1;
    private javax.swing.JLabel lblFirstName2;
    private javax.swing.JLabel lblFirstName3;
    private javax.swing.JLabel lblFirstName4;
    private javax.swing.JLabel lblFirstName5;
    private javax.swing.JLabel lblFirstName6;
    private javax.swing.JLabel lblFirstName7;
    private javax.swing.JLabel lblStudentInfoHeading;
    private javax.swing.JTable tblStudentInfo;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtParentName;
    private javax.swing.JTextField txtPhoneNumber;
    // End of variables declaration//GEN-END:variables
}
